Κωνσταντίνα Στόικου ΑΜ: 1115201500151

Έχω υλοποιήσει όλα τα ερωτήματα εκτός των 8 και 9.

Οι δομές μου είναι χωρισμένες σε 3 αρχεία. Το vertex.h που περιέχει την δομή του κόμβου, το edge.h που περιέχει την δομή της ακμής και το graph.h που περιέχει την δομή του γράφου.

Συνοπτικά η δομή του γράφου είναι μία λίστα από κόμβους όπου ο καθένας έχει μία λίστα με ακμές.

Η δομή του κόμβου αποτελείται από έναν ακέραιο id που χρησιμεύει στην συνάρτηση αναζήτησης DFS, μία συμβολοσειρά name όπου είναι το όνομα του κόμβου, έναν δείκτη σε ακμή head_edge όπου δείχνει στην κεφαλή της λίστας των ακμών(εξερχόμενων) για τον συγκεκριμένο κόμβο και έναν δείκτη σε κόμβο next όπου δείχνει στον επόμενο κόμβο της λίστας.

Η δομή της ακμής αποτελείται από έναν ακέραιο weight όπου είναι το βάρος της συγκεκριμένης ακμής, έναν δείκτη σε κόμβο όπου δείχνει στον κόμβο στον οποίο εισέρχεται η ακμή και έναν δείκτη σε ακμή όπου δείχνει στην επόμενη ακμή της λίστας (του συγκεκριμένου κόμβου).

Η δομή του γράφου αποτελείται από έναν δείκτη σε κόμβο head όπου δείχνει στην αρχή της λίστας των κόμβων και έναν ακέραιο last_id όπου αποθηκεύεται το id του τελευταίου κόμβου που εισήχθη + 1 και χρησιμεύει για να δωθεί το id στον επόμενο κόμβο που θα εισαχθεί.

Οι συναρτήσεις που αφορούν τον γράφο βρίσκονται στο graph.c και οι δηλώσεις τους στο graph.h.

Τα αρχεία των δομών τα έχω χωρίσει με αυτόν τον τρόπο ώστε να μπορούν να είναι όσο γίνεται πιο ανεξάρτητα μεταξύ τους και ώστε οι εξωτερικές συναρτήσεις να έχουν πρόσβαση μόνο στην δομή γράφο και στις συναρτήσεις του και όχι στις δομές ακμή και κόμβο.

Οι συναρτήσεις που αφορούν την main (άνοιγμα αρχείων, είσοδος χρήστη) βρίσκονται στο main_functions.c και οι δηλώσεις τους στο main_functions.h.

Οι συναρτήσεις του γράφου που καλούνται απευθείας από την συνάρτηση execute_promt των main_functions επιστρέφουν τιμή 0 αν έχουν ολοκληρωθεί επιτυχώς και τιμές 1,2,3 αν έχει προκύψει κάποιο πρόβλημα (αναλόγως το πρόβλημα επιστρέφουν και αντίστοιχη τιμή). Αυτό το έχω κάνει για να υπάρχει ελευθερία στην αντιμετώση επιτυχίας ή αποτυχίας μίας συνάρτησης σε περίπτωση επαναχρησιμοποίησης της από άλλο πρόγραμμα. (πχ. μπορεί σε κάποιο άλλο σημείο που καλείται να μην χρειάζεται να εκτυπωθεί μήνυμα)

Η συνάρτηση read_input_file των main_functions ελέγχει αν στα ορίσματα κατά την κλήση του προγράμματος υπήρχε το "-i" και αν ναι ανοίγει το αρχείο με όνομα το αμέσως όρισμα που έπεται του "-i" στην γραμμή εντολών. (οπότε το πρόγραμμα καλείται ως "./mygraph ... -i inputfile.csv ..." όπου οι τελίτσες μπορούν να είναι άλλα ορίσματα). Αφού ανοίξει το αρχείο και ελέγξει για τυχόν αποτυχία στο ανοιγμά του, διαβάζει κάθε γραμμή την οποία σπάει σε λέξεις τις οποίες δίνει σαν ορίσματα στην συνάρτηση του γράφου add_edge η οποία ελέγχει αν υπάρχουν ηήδη οι κόμβοι και αν όχι τους δημιουργεί και μετά προσθέτει την ακμή μεταξύ τους.

Η συνάρτηση write_output_file των main_functions αναζητεί με όμοιο τρόπο το "-o" στα ορίσματα της γραμμής κλήσης και αν το βρει ανοίγει το αρχείο με όνομα το όρισμα που έπεται του "-o". Στην συνέχεια καλεί την συνάρτηση του γράφου print_to_file στην οποία περνάει σαν όρισμα το ανοιγμένο αρχείο. Αυτή με την σειρά της εκτυπώνει στον αρχείο τον γράφο όπως είναι εκείνη την στιγμή με την μορφή που απαιτείται από την άσκηση.

Η συνάρτηση execute_prompt των main_functions δέχεται μία συμβολοσειρά την οποία σπάει σε λέξεις. Αναλόγως την πρώτη λέξη καλεί την αντίστοιχη συνάρτηση του γράφου με ορίσματα τις υπόλοιπες λέξεις και αναλόγως την τιμή που επιστρέφει η συνάρτηση εκτυπώνει κατάλληλο μήνυμα (επιτυχίας ή αποτυχίας). Έχω προσθέσει και κάποιες επιπλέον εντολές: print edges (pe Ni) όπου εκτυπώνει τις εξερχόμενες ακμές του δοθέντος κόμβου και print vertices (pv) όπου εκτυπώνει τους κόμβους του γράφου εκείνη την στιγμή.

Στην main αρχικά αρχικοποιείται ο γράφος με την συνάρτηση initialize_graph, έπειτα καλείται η read_input_file και στην συνέχεια ζητείται από τον χρήστη είσοδος μέχρι να πληκτρολογήσει "e". Θεωρώ ότι η είσοδος του χρήστη είναι το πολύ 100 χαρακτήρες. Σε κάθε επανάληψη καλείται η execute_prompt που ανταποκρίνεται στην είσοδο του χρήστη. Μόλις ο χρήστης εισάγει "e" καλείται η write_output_file για να γραψει στον αρχείο αν έχει δοθεί την τελική κατάσταση του γράφου και αμέσως μετά καλείται η release_memory όπου απέυθερώνει την μνήμη που καταλαμβάνει ο γράφος.

Η συνάρτηση print_simple_vertices δεν εκτυπώνει τα αποτελέσματα ακριβώς με την μορφή που απαιτείται. Συγκεκριμένα αν δεν βρεθεί κύκλος δεν εκτυπώνει - No-circle-found |Ni| αλλά - Cir-found χωρίς να ακολουθεί κάτι. Επίσης όταν εκτυπώνει τους κύκλους ο πρώτος κόμβος εκτυπώνεται έτσι: ->|Ni| αντί για έτσι |Ni|.

Η μνήμη καθ'όλη την διάρκεια του προγράμματος απελευθερώνεται σωστά.(έχει δοκιμαστεί με valgrind).


 


















 

